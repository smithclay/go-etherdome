Transform: AWS::Serverless-2016-10-31

# TODO: Add tags
Description: cupel, easy and fast ethereum test networks
Parameters:
    ApiGatewayCertificateArn:
        Type: String
        Default: arn:aws:acm:us-east-1:275197385476:certificate/43b02aea-4cba-49f5-841a-c3442183cbc2
    HostedZoneName:
        Type: String
        Default: cupel.io

Resources:
  EtherdomeFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs6.10
      Tags:
        AppName: cupel
      Handler: index.handler
      Description: "go-ethereum json-rpc lambda"
      CodeUri: ./etherdome
      Policies:
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:GetObjectACL
              Resource: !Sub 'arn:aws:s3:::${ChainDataStorageBucket}'
      # Hack to enforce the correct permissions
      # TODO: Make this permission explicit (?)
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref JSONRPCApiGateway
            Path: /
            Method: post
      Environment:
        Variables:
          CHAINDATA_S3_BUCKET: !Ref ChainDataStorageBucket
      MemorySize: 1024
      Timeout: 10

  ChainDataStorageBucket:
    Type: AWS::S3::Bucket

  ApiAuthorizerFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs6.10
      Tags:
        AppName: cupel
      Handler: index.handler
      Description: "Custom authorizer"
      CodeUri: ./authorizer
      MemorySize: 512
      Timeout: 15

  LambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for allowing Lambda Invoke"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"

  AuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - Ref: LambdaInvokePolicy

  NetworksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: network_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: network_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RestApiFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs6.10
      Tags:
        AppName: cupel
      Handler: index.handler
      Description: "REST API"
      CodeUri: ./restapi
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: 'arn:aws:dynamodb:us-west-2:*:*'
      MemorySize: 256
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref NetworksTable
      Events:
        ListNetworks:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /networks
            Method: GET
        CreateNetwork:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /networks
            Method: POST
        GetNetwork:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /networks/{networkId}
            Method: GET
        DeleteNetwork:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /networks/{networkId}
            Method: DELETE

  #
  # Management REST API Gateway
  #

  # Explicit API Gateway permission: workaround for ANY method
  # CORS example: https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/api_swagger_cors/swagger.yaml
  # https://github.com/awslabs/serverless-application-model/issues/59
  RestApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - RestApiGateway
    - RestApiFn
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestApiFn
      Principal: apigateway.amazonaws.com

  RestApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref RestApiGatewayDomainName
      RestApiId: !Ref RestApiGateway
      Stage: Prod

  RestApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiGatewayCertificateArn
      DomainName: !Sub 'api.${HostedZoneName}'

  RestApiGatewayRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - RestApiGatewayDomainName
            - DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'api.${HostedZoneName}.'
      Type: A

  # TODO: CORS support
  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "REST API"
        schemes:
          - https
        paths:
          "/networks":
            get:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                passthroughBehavior: when_no_match
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                passthroughBehavior: when_no_match
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
          "/networks/{networkId}":
            get:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
        securityDefinitions:
          authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiAuthorizerFn.Arn}/invocations
              authorizerResultTtlInSeconds: 300
              authorizerCredentials: !Sub ${AuthorizerInvokeRole.Arn}
              type: token

  #
  # JSON-RPC API Gateway
  # based on: https://github.com/daveygit2050/serverless-passgen/blob/2831e9068d2f0705c84af19c92a3f448a0c28f3e/serverless.yml
  #

  # WORKAROUND: Configure API Gateway to send logs to CloudWatch using this role.
  # TODO: Will this eventually get added to SAM?
  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: ""
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "apigateway.amazonaws.com"

  JSONRPCApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref JSONRPCApiGatewayDomainName
      RestApiId: !Ref JSONRPCApiGateway
      Stage: Prod

  JSONRPCApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiGatewayCertificateArn
      DomainName: !Sub 'testnet.${HostedZoneName}'

  JSONRPCApiGatewayRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - JSONRPCApiGatewayDomainName
            - DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'testnet.${HostedZoneName}.'
      Type: A

  JSONRPCApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "JSON-RPC API Interface"
        paths:
          "/{networkId}":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EtherdomeFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        securityDefinitions:
          authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiAuthorizerFn.Arn}/invocations
              identitySource: method.request.querystring.auth
              authorizerResultTtlInSeconds: 300
              authorizerCredentials: !Sub ${AuthorizerInvokeRole.Arn}
              type: request
        definitions:
          Empty:
            type: object
            title: Empty Schema
Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref JSONRPCApiGateway
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
