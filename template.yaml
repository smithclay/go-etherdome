Transform: AWS::Serverless-2016-10-31

# TODO: Add tags
# -- tier, type, author, app
Description: cupel, easy and fast ethereum test networks

Parameters:
    ApiGatewayCertificateArn:
        Type: String
        Default: arn:aws:acm:us-east-1:275197385476:certificate/43b02aea-4cba-49f5-841a-c3442183cbc2
    HostedZoneName:
        Type: String
        Default: cupel.io

Resources:
  EtherdomeFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs6.10
      Tags:
        AppName: cupel
      Handler: index.handler
      Description: "go-ethereum json-rpc lambda"
      CodeUri: ./etherdome
      Policies:
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:GetObjectACL
              Resource: !Sub 'arn:aws:s3:::${ChainDataStorageBucket}'
      # Hack to enforce the correct permissions
      # TODO: Make this permission explicit (?)
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref JSONRPCApiGateway
            Path: /
            Method: post
      Environment:
        Variables:
          CHAINDATA_S3_BUCKET: !Ref ChainDataStorageBucket
      MemorySize: 1024
      Timeout: 10

  ChainDataStorageBucket:
    Type: AWS::S3::Bucket

  ApiAuthorizerFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs6.10
      Tags:
        AppName: cupel
      Handler: index.handler
      Description: "Custom authorizer"
      CodeUri: ./authorizer
      MemorySize: 512
      Timeout: 15

  LambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for allowing Lambda Invoke"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"

  AuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - Ref: LambdaInvokePolicy

  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: ""
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "apigateway.amazonaws.com"

  # based on: https://github.com/daveygit2050/serverless-passgen/blob/2831e9068d2f0705c84af19c92a3f448a0c28f3e/serverless.yml
  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: Prod
      DomainName:
        Ref: ApiGatewayDomainName
      RestApiId:
        Ref: JSONRPCApiGateway
      Stage: Prod

  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiGatewayCertificateArn
      DomainName: 'testnet.${HostedZoneName}'

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - ApiGatewayDomainName
            - DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'testnet.${HostedZoneName}.'
      Type: A

  JSONRPCApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "JSON-RPC API Interface"
        paths:
          "/":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EtherdomeFn.Arn}/invocations
                responses: {}
              security:
                - authorizer: []
        securityDefinitions:
          authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiAuthorizerFn.Arn}/invocations
              identitySource: method.request.querystring.auth
              authorizerResultTtlInSeconds: 300
              authorizerCredentials: !Sub ${AuthorizerInvokeRole.Arn}
              type: request
Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref JSONRPCApiGateway
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
